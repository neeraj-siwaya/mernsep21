Difference btw function declaration and expressions:

1. Functions delaration are hoisted to the top i.e. when a js file is loaded all the
function declarations are moved to the top of the file which means a declared function
can be invoked before its declaration.

Function expression are not hoisted.

2. Function declaration are part of the global scope i.e. they are available
througout the application.

Function expressions are part of the defined scope i.e. they are available 
in the block where they are defined. For this reason, they are used mainly i.e.
they don't pollute the global scope.

Arrow functions or fat arrow function: Are anonymous function expression which are defined
as follows:
// If function body has only one statement;
(args if any) => statement;
// If function body has only multiple statements;
(args if any) => {
    statements;
}

Other global objects of Node:

1. setTimeout(): Is a function which is used to execute a callback function after
the given time. 
A function or function expression which is passed as parameter to another function
is known as callback function.
syntax of setTimeout:

setTimeout(callback, timeInMilliseconds);

2. clearTimeout(): Is used to clear a timeout.
syntax:
clearTimeout(timeoutRef);

3. setInterval(): Is a function which is used to execute a callback function repeateadly
after the given time. 

syntax of setTimeout:

setInterval(callback, timeInMilliseconds);

4. clearInterval(): Is used to clear interval.
clearTimeout(intervalRef);

etc.

Execution of a program can be synchrouns or asynchronous.

in synchronous programming, we perform an action and wait for its completion 
before doing something else.

In Asynchronous programming, we perform an action and without waiting for its 
completion start doing something else. When the old task completes, we get its
result and use it.

Node uses event loop for async programming.

this keyword: 

In JavaScript, each function has a property named this which represents the function context i.e. in 
simple words this represents the object using which the function is invoked.

When a JavaScript is executed two types of contexts are created:

1. Global context
2. Functional context

A context can be thought of as an object which has some properties and functions.


In order to understand the concept of this better we need to divide the functions in two categories:

1. Normal function
2. Method

A normal function is a function which is defined in the global context.
A method is a function which is defined within an object.

In order to invoke methods, we need objects i.e. methods are invoked as follows:

objName.methodName(args if any);

so, in case of methods, "this" always refers to the invoking object.

Uses of this keyword:

1. it is used to define constructor functions (classes in JS). A constructor function is used
for creating objects with different values. It uses this to represent object properties.

e.g. here Person is a constructor function. It receives two parameters and creates a new object and
assigns the parameters values to the object.


var Person = function(name, age){
    this.name = name; 
    this.age = age;
    this.display= function(){ // Method
        console.log(this.name+' is '+this.age+' years old.'); // In case of method, this always represents the current object.
    }
}

2. this keyword is used to pass the original context to a callback method so that callback method can use
the properties of the original context.

In async programming, we use callback methods to do something in future.

e.g. forEach() loop provided by JS can be used to understand the use of callbacks in async programming.

syntax of forEach() loop:

arrayProperty.forEach(callbackfunction);

This loop works in the following manner:

1. It iterate array elements one by one.
2. In each iteration, callback function is invoked by passing the current element as argument.

The callback that we are passing in the forEach will be executing within the context of forEach. it will not
have the invoking context available but sometimes that is requred.
As in our case we want to refer the name of invoking object within the callback.

In such case, invoking contexts need to be passed through this.

e.g. arrayProperty.forEach(callbackfunction, invokingcontext);

To solve this problem of losing the original context in callback functions, concept of arrow functions was 
introduced in ES5.
Main difference b/w an arrow and a normal is related to this keyword.
In a normal function, this points to the global object.
In an arrow function, this point to the current object.

12/09/21
In JavaScript applications, most of the times we need to use third party libraries i.e. we need to invoke
functions which have different context than current context.

In such cases, we need some mechanism to pass current context to these libararies so that they can execute
our code properly.

Each JS function is object and has some methods one of them is call() which receives the context as argument. 
It is used to invoke
third party with different contexts.

syntax: 
1. functionName.call(context);
2. functionName.call(context, arg1, arg2, ...);

All these arguments will be stored in the arguments object of the invoked function.
Each function in JS also has a property named arguments which is an object and contains the arguments passed to 
function.

apply(): apply() method is similar to call except that it receives arguemtns as array.

2. functionName.apply(context, argumentsArray);



bind(): is another method of functions which is used to create a new funtion by binding the
given function to the given context.

Syntax: var functionName = currentFunction.bind(context, arguements);

Closure: is a context which is generated when a nested function uses the variables of the outer function.
It facilitate the use of outer function variable in inner function even after the execution of outer function.

Immediately invoked function(IIFI) or self invoked functions:

An Immediately invoked function is a function which is Immediately invoked just after it is loaded
i.e. it doesn't require an explicit statement for its invocation.

syntax:
(function(args if any){
    function body;
})(required args);

Use cases of IIFIs: 
1. An IIFI acts as a wrapper for other functions and variables and prevents name conflicts. All third party
libraries are mainly provided in the form of iifis to isolate their variables with the application code.

Sep 18, 2021

What is ReactJs?

ReactJs is libarary for creating User Interfaces.  It can be used in single HTML or in a 
complex web applications.

In React, we assume that each web page is a collection of components. A component is UI element which
can be as simple as a button or text field or a label or as complex as an entire page.

React advocates building complex UIs by composing simple components.

In order to understand the use of components in React, we need to understand React Elements.

A React Element is a JS object which represent a UI/HTML (DOM) element in json format, without 
the extra baggage of DOM.

ReactJs provides React object in React library which provides methods for creating element.

createElement(): is used to create Element object.

syntax: React.createElement('HTML Element or React Component Name', attribute list, children);

To render react elements to DOM, ReactDOM library is used.

React Component: Is a function or class which receives an optional parameter props and returns 
an Element object.

In other words, we have two types of components in React:
1. Functional Component
2. Class Component

Syntax of defining a functional component:

function ComponentName(props?) {
    return element*;
}
Notes: 
? - represents optional
* - here element represents an object of type ReactElement.

To simplify developoment of components, React introduced the context of JSX i.e. extended Java JavaScript 
which is the combination of JS & HTML.

To compile JSX into pure JS, Babel transpiler is used. Babel is a tool which converts JSX into 
JavaScript.

Syntax of defining a class component:

class ComponentName extends React.Component{
    render(){
        element
    }
}

Here we are defining class which is inheriting the Component class of the React library.

A functional component directly returns an Element whereas in a class component render() method
returns the element.


Components can be further categorized as follows:

1. Stateless components
2. Stateful components

State represents data which is used in a UI.

Sep 19, 2021.

In order to pass props to class components, we need to define constructors

syntax:

class ComponentName extends React.Component{

    constructor(props){
        super(props); // Constructor is Component class is invoked.
        // Defintion of other attributes if any
    }
    render() {

        //inside the render, props can be used as this.props
    }
}



State Vs Props:

Props is the input which is provided to a component by its parent.
State is the data which is managed by the component itself.

How state is defined in a class component:

class ComponentName extends React.Component {

    constructor(props){
        super(props)
        this.state = { // we are adding state propery to the current object
            propertyName : value,
            ....
        }
    }
}


State of a component can't be directly change because such change can't be identfied by React.
React provides following method for chaning state:

  setState((currentState)=>{
      return{
          // returns an object containing modified state, this object is merged with the original 
          // state by react.
      }
  })

  <BooksList list={this.state.books} onRemove={this.removeBook.bind(this)}/> 


  Sep 25, 2021


  Creating React Applications:

  1. Requirements for creating react applications

        Node Must be installed. Node is a JavaScript runtime environment which is used to execute
        java script prorams outside the browser. It can be installed on a server or a standalone
        computer.

        Over the time, NodeJs has evovled an eco system which comprises following things:

            1) NPM Repository: A Server for sharing node libraries which are known as packages.
            2) Tools: A lot of tools are provided by Node community to facilitate development, 
            publishing, and use of node packages. Most commonly used Node packages are:

                a) NPM: Node Package Manager: Is used to publish, install, and uninstall node packages.
                b) NPX: Node Package Executer: Is used to execute node packages.
                c) NVM: Node Version Manager: Is used to install and manager different versions of nodes.
            etc.

    Dependencies can be of two types:

    1. Development Dependency
    2. Application Dependency

    Development Dependencies represent tools which are required for the development of a specific 
    kind of applications. In case of react, create-react-app, Babel etc are examples of 
    development dependency.

    Application Dependencies represents libraries or frameworks which are used in applications. React,
    ReactDOM, Redux, Exios etc are exaples of application dependencies.


 In order to create react applications, create-react-app tool is provided. 

This tool can be used in the following ways:

old approach:

1. Install it locally or globally through npm install command.
2. In the package.json file of the application, create a script entry for it.
3. Run the script using the npm run command.


New approach:

Simply use npx tool to run create-react-app using the followin syntax:

npx create-react-app AppName

NPX will check whether creact-react-app tool is install locally or globally, if yes it will execute it 
otherwise it will fetch it from NPM repository and execute it.
  

Understanding the directory structure of a React Application:

Each newly created react application has following files and folders:

1. node_modules: Is the folder where all dependencies (Node packages) are stored.
2. public: is a folder which contains static rescours such as images, icons and index.html page. 
Which act as the home page of the react application. index.html page contains 
following div which is used by react to hook the app component to the page.
<div id="root"></div>

i.e. at runtime, react app component is associated to this div.
3. src: is the main source folder which is used to store js files containing react components and 
        it also has css files.

        Under the src folder, index.js file is the entry point of application execution. It is responsible
        for rendering App compoent inside the root div. 
        it does the same using the following code:

        ReactDOM.render(
            <React.StrictMode>
                <App />
            </React.StrictMode>,
        document.getElementById('root')
        );

     Another important file under src is App.js, it contains the definition of App component of 
     React.

 package.json & package-lock.json are two important files of each application.

 package.json file contains all the configuration information of the application. Mainly it contains
 the depencies, scripts and other general or tool specific configuration.
 
 Sep 26, 2021

 ES 6 imports and exports: Each JS file is treated as a module in NodeJs. By default, var, functions or 
 objects which are defined in a module, can only be used within the module.
 To facilitate the use of members of one module in another, we have to export them in the source module
 and need to import in the target module.


 ES 6 supports named and default exports:

named export: 

syntax: export memberName;
 
            or
         export member declaration or definition;

 e.g.
// First approach
    function one() {

    }       

    export one; //named export

// Second approach
export function one() { //Named export

}

Named exports are imported as follows

import {memberName} from 'moduleName';

e.g. import {one} from '/.src';




 let there be two modules a (a.js) & b(b.js). a has two functions x() & y() which need to be
 used in b.js.

// a.js
export function x(){

}

export function y(){

}

//b.js
import {x, y} from './a'


Default export: In each module we can have one default export
// c.js
export default function f1(){ //default export

}

export function f2(){ //normal or named export

}

syntax of default import

import memberName from 'moduleName'

Note: If a module has both default and named exports then default import is done before named imports.

e.g. in d.js only f1 is required but in e.js both f1() & f2() are required.

// d.js
import f1 from './c'

// e.js

import f1, {f2} from './c'


Note:  A functional compoponent or the render method of a class component, only one UI element 
can be returned. If we have to return multiple UI elements, we need to wrap them in a single element.


Managing input in React:

React provides controlled and uncontrolled input elements for managing input.

A controlled element is a UI element value of which is managed/controlled by a react component.